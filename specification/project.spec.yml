openapi: 3.1.0
info:
  title: API server for «Six cities» project.
  description: |-
    * The list of resources and routes for «Six cities» project.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0
tags:
  - name: rentOffers
    description: Actions with rent offers.
  - name: cities
    description: Actions with cities.
  - name: comments
    description: Actions with rent comments.
  - name: users
    description: Actions with rent users.

paths:
  /users/signup:
    post:
      tags:
        - users
      summary: User sign up
      description: Sign up a new user.

      requestBody:
        description: The data to create a new user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true

      responses:
        "201":
          description: User is signed up. User's object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        "409":
          description: The user with such an email already exists.

  /users/signin:
    post:
      tags:
        - users
      summary: User sign in
      description: User sign in based on login and password

      requestBody:
        description: The data to sign in a user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userSignIn'
        required: true

      responses:
        "201":
          description: User is signed in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signInPayloadData'
        "404":
          description: User is not found.
        "401":
          description: Incorrect user name or password.

    get:
      tags:
        - users
      summary: Check the user's status
      description: Returns user data

      responses:
        "201":
          description: User is signed in.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        "401":
          description: User is not found.

  /users/{userId}/avatar:
    post:
      tags:
        - users
      summary: Upload avatar image
      description: Uploads an image of user's avatar. The image should be in `png` or `jpg` format.

  /favorites:
    get:
      tags:
        - favorites
      summary: Get my favorite rent offers
      description: Returns a list of favorite rent offers for the authenticated user

      responses:
        "200":
            description: A list of favorite rent offers.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/shortRentOffer'

  /favorites/{rentOfferId}:
    put:
      tags:
        - favorites
      summary: Add rent offer to my favorites
      parameters:
        - in: path
          name: rentOfferId
          required: true
          schema:
            type: string
          description: Unique identifier of a rent offer

      responses:
        "200":
          description: A list of favorite rent offers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/shortRentOffer'
    delete:
      tags:
        - favorites
      summary: Remove rent offer from my favorites
      parameters:
        - in: path
          name: rentOfferId
          required: true
          schema:
            type: string
          description: Unique identifier of a rent offer

      responses:
        "200":
            description: A list of favorite rent offers.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/shortRentOffer'

  /cities:
    get:
      tags:
        - cities
      summary: Get list of cities
      description: Returns a list of city objects.

      responses:
        "200":
            description: Array of city object.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/city'

  /cities/{cityId}/rentOffers:
    get:
      tags:
        - cities
      summary: Get list of offers for specific city
      description: Returns a list of city objects.

      parameters:
        - in: query
          name: cityId
          required: true
          schema:
            type: integer
          description: Unique idetifier of a city

      responses:
        "200":
            description: Array of city object.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/city'
        "404":
            description: City with cityId is not found

  /cities/{cityId}/rentOffers/premium:
    get:
      tags:
        - cities
      summary: Get list of premium offers for specific city
      description: Returns a list of premiun rent offers (not more that 3 per request).

      parameters:
        - in: query
          name: cityId
          required: true
          schema:
            type: integer
          description: Unique idetifier of a city

      responses:
        "200":
            description: Array of premium city object.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/city'
        "404":
            description: City with cityId is not found

  /rentOffers?limit=10:
    get:
      tags:
        - rentOffers
      summary: Get list of rent offers
      description: Returns a list of rent offers objects. By default it's 60 offers

      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
          description: Amount of rent offers to get. If ommited, then it's 60 offers

      responses:
        "200":
            description: Array of rent offer objects.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/getRentOffer'

  /rentOffers/{offerId}:
    get:
      tags:
        - rentOffers
      summary: Get detailed info about specific rent offer
      description: Returns a single rent offer object

      parameters:
        - in: query
          name: offerId
          required: true
          schema:
            type: integer
          description: Unique idetifier of a rent offer

      responses:
        "200":
            description: Rent offer object with detailed information.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/rentOffer'

    patch:
      tags:
        - rentOffers
      summary: Edit rent offer
      description: Edit an existing rent offer.

      requestBody:
        description: The data to update existing rent offer.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/editRentOffer'
        required: true

      responses:
        "204":
            description: Updated rent offer object.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/editRentOffer'

    delete:
      tags:
        - rentOffers
      summary: Delete rent offer
      description: Delete an existing rent offer .

      parameters:
        - in: query
          name: rentOfferId
          required: true
          schema:
            type: integer
          description: Rent offer id

      responses:
        "200":
            description: Updated rent offer object.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/defaultPayloadData'

  /rentOffers:
    post:
      tags:
        - rentOffers
      summary: Create rent offer
      description: Creates a rent offer object.

      requestBody:
        description: The data to create a new rent offer.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createRentOffer'
        required: true

      responses:
        "201":
            description: Rent offer object.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/rentOffer'

  /rentOffers/{offerId}/comments:
    post:
      tags:
        - rentOffers
      summary: Get comments for a specifit rent offer
      description: Returns a list of comments

      parameters:
        - in: query
          name: offerId
          required: true
          schema:
            type: integer
          description: Unique idetifier of a rent offer

      responses:
        "200":
            description: Array of comment objects.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/comment'

  /rentOffers/{offerId}/preview:
    post:
      tags:
        - rentOffers
      summary: Upload preview image
      description: Uploads an preview image for a specific offer. The image should be in `png` or `jpg` format.

      parameters:
        - in: query
          name: offerId
          required: true
          schema:
            type: integer
          description: Unique idetifier of a rent offer

      responses:
        "201":
            description: Object with single preview image.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/offerPreviewImage'

  /rentOffers/{offerId}/images:
    post:
      tags:
        - rentOffers
      summary: Upload gallery images
      description: Uploads gallery images for a specific offer (always 6 images). The image should be in `png` or `jpg` format.

      parameters:
        - in: query
          name: offerId
          required: true
          schema:
            type: integer
          description: Unique idetifier of a rent offer

      responses:
        "201":
            description: Array of images.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/offerGalleryImages'

  /comments:
    post:
      tags:
        - comments
      summary: Add a new comment to a specific rent offer
      description: Returns a newly created comment object

      requestBody:
        description: The data to create a new comment.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createComment'
        required: true

      responses:
        "200":
            description: A new comment object.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/comment'

components:
  schemas:
    createUser:
      type: object

      properties:
        email:
          type: string
          example: john.lennon@gmail.com

        firstName:
          type: string
          example: John

        lastName:
          type: string
          example: Lennon

        avatarPath:
          type: string
          example: avatar.jpg

        password:
          type: string
          example: 123456

        type:
          type: string
          example: Usual

    userSignIn:
      type: object

      properties:
        email:
          type: string
          example: john.lennon@gmail.com

        password:
          type: string
          example: 123456abc

    getRentOffer:
      type: object

      properties:
        title:
          type: string
          example: Wood and stone cozy place

        publishDate:
          type: string
          example: "2022-04-06T08:45:40.283Z"

        city:
          type: string
          example: "Amsterdam"

        preview:
          type: string
          example: "preview.jpg"

        isPremium:
          type: boolean
          example: true

        isFavourite:
          type: boolean
          example: false

        houseType:
          type: string
          example: "Apartment"

        price:
          type: number
          example: 120

        rating:
          type: number
          example: 7

        commentsCount:
          type: number
          example: 2

    createRentOffer:
      type: object

      properties:
        title:
          type: string
          example: Wood and stone cozy place

        description:
          type: string
          example: Lofoten Fishing has mountain views, free Wifi and free private parking, located in Å

        publishDate:
          type: string
          example: "2022-04-06T08:45:40.283Z"

        cityId:
          type: string
          example: "1234ndsvbh34"

        preview:
          type: string
          example: "preview.jpg"

        images:
          type: array
          example: ["image-1.jpg", "image-2.jpg"]

        isPremium:
          type: boolean
          example: true

        rating:
          type: number
          example: 8

        houseType:
          type: string
          example: "Apartment"

        rooms:
          type: number
          example: 4

        guests:
          type: number
          example: 2

        price:
          type: number
          example: 120

        features:
          type: string
          example: '["Laptop", "Washer"]'

        authorId:
          type: string
          example: 6329c3d6a04ab1061c6425ea

    editRentOffer:
      type: object

      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea

        title:
          type: string
          example: Wood and stone cozy place

        description:
          type: string
          example: Lofoten Fishing has mountain views, free Wifi and free private parking, located in Å

        publishDate:
          type: string
          example: "2022-04-06T08:45:40.283Z"

        cityId:
          type: string
          example: "123234bsdhb"

        preview:
          type: string
          example: "preview.jpg"

        images:
          type: array
          example: ["image-1.jpg", "image-2.jpg"]

        isPremium:
          type: boolean
          example: true

        rating:
          type: number
          example: 8

        houseType:
          type: string
          example: "Apartment"

        rooms:
          type: number
          example: 4

        guests:
          type: number
          example: 2

        price:
          type: number
          example: 120

        features:
          type: string
          example: '["Laptop", "Washer"]'

    createComment:
      type: object

      properties:
        text:
          type: string
          example: My awesome comment

        userId:
          type: string
          example: "2322kd2kemd2"

        rentOfferId:
          type: string
          example: "1231lx0sa2kemd2"

    user:
      type: object

      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea

        email:
          type: string
          example: john.lennon@gmail.com

        firstName:
          type: string
          example: John

        lastName:
          type: string
          example: Lennon

    city:
      type: object

      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea

        name:
          type: string
          example: Amsterdam

        latitude:
          type: number
          example: 52.370216

        longitude:
          type: number
          example: 4.895168

    rentOffer:
      type: object

      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea

        title:
          type: string
          example: Wood and stone cozy place

        description:
          type: string
          example: Lofoten Fishing has mountain views, free Wifi and free private parking, located in Å

        publishDate:
          type: string
          example: "2022-04-06T08:45:40.283Z"

        city:
          type: string
          example: "Amsterdam"

        preview:
          type: string
          example: "preview.jpg"

        images:
          type: array
          example: ["image-1.jpg", "image-2.jpg"]

        isPremium:
          type: boolean
          example: true

        isFavorite:
          type: boolean
          example: false

        rating:
          type: number
          example: 8

        houseType:
          type: string
          example: "Apartment"

        rooms:
          type: number
          example: 4

        guests:
          type: number
          example: 2

        price:
          type: number
          example: 120

        features:
          type: array
          example: ["Laptop", "Washer"]

        authorId:
          type: string
          example: 6329c3d6a04ab1061c6425ea

        commentCount:
          type: number
          example: 11

    shortRentOffer:
      type: object

      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea

        title:
          type: string
          example: Wood and stone cozy place

        publishDate:
          type: string
          example: "2022-04-06T08:45:40.283Z"

        city:
          type: object
          properties:
            name:
              type: string
              example: "Amsterdam"
            latitude:
              type: number
              example: 52.370216

            longitude:
              type: number
              example: 4.895168

        preview:
          type: string
          example: "preview.jpg"

        isPremium:
          type: boolean
          example: true

        rating:
          type: number
          example: 8

        houseType:
          type: string
          example: "Apartment"

        price:
          type: number
          example: 120

        commentCount:
          type: number
          example: 11

    comment:
      type: object

      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea

        text:
          type: string
          example: My awesome comment

        publishDate:
          type: string
          example: "2022-04-06T08:45:40.283Z"

        user:
           $ref: '#/components/schemas/user'

    defaultPayloadData:
        type: object

        properties:
          success:
            type: boolean
            example: true

          message:
            type: string
            example: "The resource was succesfully deleted/updated"

    signInPayloadData:
        type: object

        properties:
          success:
            type: boolean
            example: true

          message:
            type: string
            example: "The resource was succesfully deleted/updated"

          token:
            type: string
            example: 123bcv!87KL

    offerGalleryImages:
        type: object

        properties:
          images:
            type: array
            items:
              type: string

    offerPreviewImage:
        type: object

        properties:
          preview:
            type: string
